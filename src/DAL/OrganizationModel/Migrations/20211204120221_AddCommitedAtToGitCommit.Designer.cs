// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tayra.Models.Organizations;

namespace Tayra.Models.Organizations.Migrations
{
    [DbContext(typeof(OrganizationDbContext))]
    [Migration("20211204120221_AddCommitedAtToGitCommit")]
    partial class AddCommitedAtToGitCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tayra.Models.Organizations.ActionPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConcludedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("ActionPoints");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ActionPointSetting", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MuteUntil")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyByNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyByPush")
                        .HasColumnType("bit");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Type", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("ActionPointSettings");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Blob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Filesize")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RewardClaimedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("ClaimBundles");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleItem", b =>
                {
                    b.Property<Guid>("ClaimBundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileInventoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClaimBundleId", "ProfileInventoryItemId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileInventoryItemId", "TenantId");

                    b.ToTable("ClaimBundleItems");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleTokenTxn", b =>
                {
                    b.Property<Guid>("ClaimBundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TokenTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClaimBundleId", "TokenTransactionId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TokenTransactionId", "TenantId");

                    b.ToTable("ClaimBundleTokenTxns");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.GitCommit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Additions")
                        .HasColumnType("int");

                    b.Property<string>("AuthorExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommitedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Deletions")
                        .HasColumnType("int");

                    b.Property<string>("ExternalRepositoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FirstPullRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("AuthorProfileId", "TenantId");

                    b.HasIndex("FirstPullRequestId", "TenantId");

                    b.ToTable("GitCommits");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Integration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.HasIndex("ProfileId", "SegmentId", "TenantId");

                    b.ToTable("Integrations");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.IntegrationField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IntegrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("IntegrationId", "TenantId");

                    b.ToTable("IntegrationFields");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.HasIndex("TeamId", "TenantId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ArchivedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedDateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GiveawayQuantityRemaining")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisenchantable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGiftable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("QuestsQuantityRemaining")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int?>("ShopQuantityRemaining")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemDisenchant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("ItemId", "TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("ItemDisenchants");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemGift", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("ItemId", "TenantId");

                    b.HasIndex("ReceiverId", "TenantId");

                    b.HasIndex("SenderId", "TenantId");

                    b.ToTable("ItemGifts");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LocalTenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAppsOnboardingCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMembersOnboardingCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSegmentOnboardingCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TenantId");

                    b.ToTable("LocalTenants");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssistedByTayra")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LogDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("LogDevices");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LogSetting", b =>
                {
                    b.Property<Guid>("LogDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LogEvent")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogDeviceId", "LogEvent", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("LogSettings");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ArchivedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("AssistantSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("BornOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmployedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnalyticsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileOnboardingCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("IdentityId", "TenantId");

                    b.HasIndex("Username", "TenantId")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.HasIndex("SegmentId", "ProfileId", "TenantId");

                    b.HasIndex("TeamId", "ProfileId", "TenantId");

                    b.HasIndex("SegmentId", "TeamId", "ProfileId", "TenantId")
                        .IsUnique();

                    b.ToTable("ProfileAssignments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileExternalId", b =>
                {
                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("int");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalId", "IntegrationType", "SegmentId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("ProfileExternalIds");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileInventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcquireDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AcquireMethod")
                        .HasColumnType("int");

                    b.Property<bool>("ClaimRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "IsActive", "TenantId");

                    b.HasIndex("ItemId", "ProfileId", "IsActive", "TenantId");

                    b.ToTable("ProfileInventoryItems");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileLog", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "LogId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("LogId", "TenantId");

                    b.HasIndex("ProfileId", "Event", "TenantId");

                    b.ToTable("ProfileLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileMetric", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ProfileId", "Type", "DateId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("ProfileMetrics");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfilePraise", b =>
                {
                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PraiserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("DateId", "ProfileId", "PraiserProfileId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("ProfilePraises");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.PullRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Additions")
                        .HasColumnType("int");

                    b.Property<Guid?>("AuthorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommitsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Deletions")
                        .HasColumnType("int");

                    b.Property<string>("ExternalAuthorUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExternalCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalNumber")
                        .HasColumnType("int");

                    b.Property<string>("ExternalRepositoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExternalUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MergedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewCommentsCount")
                        .HasColumnType("int");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("AuthorProfileId", "TenantId");

                    b.ToTable("PullRequests");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.PullRequestReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommitId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PullRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReviewerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("PullRequestId", "TenantId");

                    b.HasIndex("ReviewerProfileId", "TenantId");

                    b.ToTable("PullRequestReviews");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.PullRequestReviewComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CommenterProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExternalCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExternalUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PullRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PullRequestReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("CommenterProfileId", "TenantId");

                    b.HasIndex("PullRequestId", "TenantId");

                    b.HasIndex("PullRequestReviewId", "TenantId");

                    b.ToTable("PullRequestReviewComments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Quest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActiveUntil")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletionsLimit")
                        .HasColumnType("int");

                    b.Property<int?>("CompletionsRemaining")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEasterEgg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RewardValue")
                        .HasColumnType("real");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestCommit", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestId", "ProfileId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("QuestCommits");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestCompletion", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestId", "ProfileId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("QuestCompletions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestGoal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCommentRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("QuestId", "TenantId");

                    b.ToTable("QuestGoals");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestGoalCompletion", b =>
                {
                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("GoalId", "ProfileId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("QuestGoalCompletions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestReward", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuestId", "ItemId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ItemId", "TenantId");

                    b.ToTable("QuestRewards");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestSegment", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestId", "SegmentId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("QuestSegments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegrationInstallationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWithOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TeamId", "TenantId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Segment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AllocatedBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ArchivedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("AssistantSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataStore")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DataWarehouse")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsReportingUnlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Key", "ArchivedAt", "TenantId")
                        .IsUnique();

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.SegmentArea", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SegmentAreas");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.SegmentMetric", b =>
                {
                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("SegmentId", "Type", "DateId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("SegmentMetrics");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ArchivedAt")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DiscountEndsAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("DiscountPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("FeaturedUntil")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ItemId", "TenantId")
                        .IsUnique();

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItemSegment", b =>
                {
                    b.Property<Guid>("ShopItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DiscountEndsAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("DiscountPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("HiddenAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("ShopItemId", "SegmentId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.ToTable("ShopItemSegments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopLog", b =>
                {
                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "LogId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("LogId", "TenantId");

                    b.ToTable("ShopLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GiftFor")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiscounted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedDateId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float?>("PriceDiscountedFor")
                        .HasColumnType("real");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("ItemId", "TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.HasIndex("ProfileId", "Status", "TenantId");

                    b.ToTable("ShopPurchases");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ArchivedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("AssistantSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "Key", "ArchivedAt", "TenantId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamMetric", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("TeamId", "Type", "DateId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("TeamMetrics");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TokenTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ClaimRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<int>("TokenType")
                        .HasColumnType("int");

                    b.Property<string>("TxnHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ProfileId", "TenantId");

                    b.ToTable("TokenTransactions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WebhookEventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WebhookEventLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WorkUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssigneeExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AssigneeProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AutoTimeSpentInMinutes")
                        .HasColumnType("int");

                    b.Property<float?>("BugPopulationAffect")
                        .HasColumnType("real");

                    b.Property<int?>("BugSeverity")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<float?>("EffortScore")
                        .HasColumnType("real");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalProjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("int");

                    b.Property<bool>("IsProductionBugCausing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProductionBugFixing")
                        .HasColumnType("bit");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedDateId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ReporterProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("SegmentAreaId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SegmentAreaId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StoryPoints")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TimeOriginalEstimatInMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSpentInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("AssigneeProfileId", "TenantId");

                    b.HasIndex("SegmentAreaId1", "TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.HasIndex("TeamId", "TenantId");

                    b.HasIndex("ExternalId", "IntegrationType", "TenantId");

                    b.HasIndex("ExternalId", "IntegrationType", "SegmentId", "TenantId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL AND [SegmentId] IS NOT NULL");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WorkUnitLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssigneeProfileId")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssigneeProfileId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReporterProfileId")
                        .HasColumnType("int");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TenantId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("AssigneeProfileId1", "TenantId");

                    b.HasIndex("SegmentId", "TenantId");

                    b.HasIndex("TeamId", "TenantId");

                    b.ToTable("TaskLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ActionPoint", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany("ActionPoints")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ActionPointSetting", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Blob", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundle", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleItem", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.ClaimBundle", "ClaimBundle")
                        .WithMany("Items")
                        .HasForeignKey("ClaimBundleId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.ProfileInventoryItem", "ProfileInventoryItem")
                        .WithMany()
                        .HasForeignKey("ProfileInventoryItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClaimBundle");

                    b.Navigation("ProfileInventoryItem");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleTokenTxn", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.ClaimBundle", "ClaimBundle")
                        .WithMany("TokenTxns")
                        .HasForeignKey("ClaimBundleId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.TokenTransaction", "TokenTransaction")
                        .WithMany()
                        .HasForeignKey("TokenTransactionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClaimBundle");

                    b.Navigation("TokenTransaction");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.GitCommit", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "AuthorProfile")
                        .WithMany()
                        .HasForeignKey("AuthorProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.PullRequest", "FirstPullRequest")
                        .WithMany()
                        .HasForeignKey("FirstPullRequestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorProfile");

                    b.Navigation("FirstPullRequest");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Integration", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Integrations")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany("Integrations")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.IntegrationField", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Integration", "Integration")
                        .WithMany("Fields")
                        .HasForeignKey("IntegrationId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Invitation", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segment");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Item", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemDisenchant", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemGift", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Log", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LogDevice", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LogSetting", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LogDevice", "LogDevice")
                        .WithMany("Settings")
                        .HasForeignKey("LogDeviceId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LogDevice");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LoginLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Profile", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileAssignment", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Assignments")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany("Members")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Segment");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileExternalId", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany("MembersLinked")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileInventoryItem", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Log");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileMetric", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfilePraise", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Praises")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.PullRequest", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "AuthorProfile")
                        .WithMany()
                        .HasForeignKey("AuthorProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorProfile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.PullRequestReview", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.PullRequest", "PullRequest")
                        .WithMany()
                        .HasForeignKey("PullRequestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "ReviewerProfile")
                        .WithMany()
                        .HasForeignKey("ReviewerProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PullRequest");

                    b.Navigation("ReviewerProfile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.PullRequestReviewComment", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "CommenterProfile")
                        .WithMany()
                        .HasForeignKey("CommenterProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.PullRequest", "PullRequest")
                        .WithMany()
                        .HasForeignKey("PullRequestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.PullRequestReview", "PullRequestReview")
                        .WithMany()
                        .HasForeignKey("PullRequestReviewId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommenterProfile");

                    b.Navigation("PullRequest");

                    b.Navigation("PullRequestReview");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Quest", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Segment", null)
                        .WithMany("Quests")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestCommit", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Quest", "Quest")
                        .WithMany("Commits")
                        .HasForeignKey("QuestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestCompletion", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("CompletedQuests")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestGoal", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Quest", "Quest")
                        .WithMany("Goals")
                        .HasForeignKey("QuestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestGoalCompletion", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.QuestGoal", "Goal")
                        .WithMany("Completitions")
                        .HasForeignKey("GoalId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestReward", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Quest", "Quest")
                        .WithMany("Rewards")
                        .HasForeignKey("QuestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestSegment", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Quest", "Quest")
                        .WithMany("Segments")
                        .HasForeignKey("QuestId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Repository", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Segment", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.SegmentArea", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.SegmentMetric", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Shop", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItem", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItemSegment", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.ShopItem", "ShopItem")
                        .WithMany("Segments")
                        .HasForeignKey("ShopItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segment");

                    b.Navigation("ShopItem");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Log");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopPurchase", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany("ShopPurchases")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Profile");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Team", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany("Teams")
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamMetric", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TokenTransaction", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Tokens")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WebhookEventLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WorkUnit", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "AssigneeProfile")
                        .WithMany()
                        .HasForeignKey("AssigneeProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.SegmentArea", "SegmentArea")
                        .WithMany()
                        .HasForeignKey("SegmentAreaId1")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssigneeProfile");

                    b.Navigation("Segment");

                    b.Navigation("SegmentArea");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WorkUnitLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "AssigneeProfile")
                        .WithMany()
                        .HasForeignKey("AssigneeProfileId1")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tayra.Models.Organizations.LocalTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssigneeProfile");

                    b.Navigation("Segment");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundle", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("TokenTxns");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Integration", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.LogDevice", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Profile", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CompletedQuests");

                    b.Navigation("Integrations");

                    b.Navigation("InventoryItems");

                    b.Navigation("Praises");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Quest", b =>
                {
                    b.Navigation("Commits");

                    b.Navigation("Goals");

                    b.Navigation("Rewards");

                    b.Navigation("Segments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.QuestGoal", b =>
                {
                    b.Navigation("Completitions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Segment", b =>
                {
                    b.Navigation("ActionPoints");

                    b.Navigation("Integrations");

                    b.Navigation("Members");

                    b.Navigation("MembersLinked");

                    b.Navigation("Quests");

                    b.Navigation("ShopPurchases");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItem", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
