// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tayra.Models.Organizations;

namespace Tayra.Models.Organizations.Migrations
{
    [DbContext(typeof(OrganizationDbContext))]
    [Migration("20191206101751_BET122")]
    partial class BET122
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Firdaws.DAL.EntityChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<byte>("AuditType");

                    b.Property<string>("ChangedValues");

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityState");

                    b.Property<string>("EntityType");

                    b.Property<DateTime>("Modified");

                    b.Property<int>("ModifiedBy");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EntityChangeLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("ActiveUntil");

                    b.Property<int?>("CompletionsLimit");

                    b.Property<int?>("CompletionsRemaining");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("CustomReward");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndedAt");

                    b.Property<string>("Image");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsEasterEgg");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<int>("Status");

                    b.Property<double>("TokenRewardValue");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ChallengeCompletion", b =>
                {
                    b.Property<int>("ChallengeId");

                    b.Property<int>("ProfileId");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("LastModified");

                    b.HasKey("ChallengeId", "ProfileId", "OrganizationId");

                    b.HasAlternateKey("ChallengeId", "ProfileId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ChallengeCompletions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("ProfileId");

                    b.Property<DateTime?>("RewardClaimedAt");

                    b.Property<int>("Type");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ClaimBundles");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleItem", b =>
                {
                    b.Property<int>("ClaimBundleId");

                    b.Property<int>("ProfileInventoryItemId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("ClaimBundleId", "ProfileInventoryItemId", "OrganizationId");

                    b.HasAlternateKey("ClaimBundleId", "ProfileInventoryItemId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileInventoryItemId");

                    b.ToTable("ClaimBundleItems");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleTokenTxn", b =>
                {
                    b.Property<int>("ClaimBundleId");

                    b.Property<int>("TokenTransactionId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("ClaimBundleId", "TokenTransactionId", "OrganizationId");

                    b.HasAlternateKey("ClaimBundleId", "TokenTransactionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TokenTransactionId");

                    b.ToTable("ClaimBundleTokenTxns");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime?>("EndedAt");

                    b.Property<bool>("IsIndividual");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("PreviousCompetitionId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RepeatCount");

                    b.Property<bool>("RepeatWhenCompleted");

                    b.Property<DateTime?>("ScheduledEndAt");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<int>("Status");

                    b.Property<int>("Theme");

                    b.Property<int>("TokenId");

                    b.Property<double>("TokenRewardValue");

                    b.Property<int>("Type");

                    b.Property<int?>("WinnerId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PreviousCompetitionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TokenId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.CompetitionLog", b =>
                {
                    b.Property<int>("CompetitionId");

                    b.Property<int>("LogId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Event");

                    b.HasKey("CompetitionId", "LogId", "OrganizationId");

                    b.HasAlternateKey("CompetitionId", "LogId");

                    b.HasIndex("LogId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("CompetitionId", "Event");

                    b.ToTable("CompetitionLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.CompetitionReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("CompetitionId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("TokenId");

                    b.Property<float>("TokenValue");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TokenId");

                    b.ToTable("CompetitionRewards");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Competitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("CompetitionId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("DisplayName");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int?>("ProfileId");

                    b.Property<double>("ScoreValue");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TeamId");

                    b.HasIndex("CompetitionId", "ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.HasIndex("CompetitionId", "TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.HasIndex("CompetitionId", "ProfileId", "TeamId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL AND [TeamId] IS NOT NULL");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.CompetitorScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("CompetitionId");

                    b.Property<int>("CompetitorId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("ProfileId");

                    b.Property<int?>("TeamId");

                    b.Property<double>("Value");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TeamId");

                    b.HasIndex("CompetitorId", "ProfileId");

                    b.HasIndex("CompetitorId", "TeamId");

                    b.ToTable("CompetitorScores");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("ProjectId");

                    b.Property<int>("Type");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Integrations");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.IntegrationField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("IntegrationId");

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Value");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("IntegrationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("IntegrationFields");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<Guid>("Code");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("EmailId")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("ProfileId");

                    b.Property<int>("Status");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActivable");

                    b.Property<bool>("IsDisenchantable");

                    b.Property<bool>("IsGiftable");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Rarity");

                    b.Property<int>("Type");

                    b.Property<float>("WorthValue");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemDisenchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ItemDisenchants");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("LastModified");

                    b.Property<string>("Message")
                        .HasMaxLength(250);

                    b.Property<int>("ReceiverId");

                    b.Property<int>("SenderId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ItemGifts");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Data");

                    b.Property<int>("Event");

                    b.Property<DateTime?>("LastModified");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Organization", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("FirstName");

                    b.Property<int>("IdentityId");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("LastName");

                    b.Property<string>("Nickname");

                    b.Property<int>("Role");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasFilter("[Nickname] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileInventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("AcquireDetail");

                    b.Property<int>("AcquireMethod");

                    b.Property<bool>("ClaimRequired");

                    b.Property<DateTime?>("ClaimedAt");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ItemId");

                    b.Property<int>("ItemType");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId", "IsActive");

                    b.HasIndex("ItemId", "ProfileId", "IsActive");

                    b.ToTable("ProfileInventoryItems");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileLog", b =>
                {
                    b.Property<int>("ProfileId");

                    b.Property<int>("LogId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Event");

                    b.HasKey("ProfileId", "LogId", "OrganizationId");

                    b.HasAlternateKey("ProfileId", "LogId");

                    b.HasIndex("LogId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId", "Event");

                    b.ToTable("ProfileLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileOneUp", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("UppedProfileId");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.HasKey("DateId", "UppedProfileId", "CreatedBy", "OrganizationId");

                    b.HasAlternateKey("DateId", "UppedProfileId", "CreatedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UppedProfileId");

                    b.ToTable("ProfileOneUps");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileReportDaily", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("ProfileId");

                    b.Property<int>("TaskCategoryId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("AssistsChange");

                    b.Property<int>("AssistsTotal");

                    b.Property<float>("CompanyTokensChange");

                    b.Property<float>("CompanyTokensTotal");

                    b.Property<int>("ComplexityChange");

                    b.Property<int>("ComplexityTotal");

                    b.Property<float>("ContributionChange");

                    b.Property<float>("ContributionTotal");

                    b.Property<DateTime>("Created");

                    b.Property<float>("EffortScoreChange");

                    b.Property<float>("EffortScoreTotal");

                    b.Property<float>("ErrorChange");

                    b.Property<float>("ErrorTotal");

                    b.Property<int>("IterationCount");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("OneUpsGivenChange");

                    b.Property<int>("OneUpsGivenTotal");

                    b.Property<int>("OneUpsReceivedChange");

                    b.Property<int>("OneUpsReceivedTotal");

                    b.Property<int>("SavesChange");

                    b.Property<int>("SavesTotal");

                    b.Property<int>("TacklesChange");

                    b.Property<int>("TacklesTotal");

                    b.Property<int>("TasksCompletedChange");

                    b.Property<int>("TasksCompletedTotal");

                    b.Property<int>("TurnoverChange");

                    b.Property<int>("TurnoverTotal");

                    b.HasKey("DateId", "ProfileId", "TaskCategoryId", "OrganizationId");

                    b.HasAlternateKey("DateId", "ProfileId", "TaskCategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("ProfileReportsDaily");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileReportWeekly", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("ProfileId");

                    b.Property<int>("TaskCategoryId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("AssistsChange");

                    b.Property<float>("AssistsTotalAverage");

                    b.Property<float>("CompanyTokensChange");

                    b.Property<float>("CompanyTokensTotalAverage");

                    b.Property<int>("ComplexityChange");

                    b.Property<float>("ComplexityTotalAverage");

                    b.Property<float>("ContributionChange");

                    b.Property<float>("ContributionTotalAverage");

                    b.Property<DateTime>("Created");

                    b.Property<float>("DImpactAverage");

                    b.Property<float>("DImpactTotalAverage");

                    b.Property<float>("EffortScoreChange");

                    b.Property<float>("EffortScoreTotalAverage");

                    b.Property<float>("ErrorChange");

                    b.Property<float>("ErrorTotalAverage");

                    b.Property<float>("Heat");

                    b.Property<float>("HeatIndex");

                    b.Property<int>("IterationCount");

                    b.Property<DateTime?>("LastModified");

                    b.Property<float>("OImpactAverage");

                    b.Property<float>("OImpactTotalAverage");

                    b.Property<int>("OneUpsGivenChange");

                    b.Property<float>("OneUpsGivenTotalAverage");

                    b.Property<int>("OneUpsReceivedChange");

                    b.Property<float>("OneUpsReceivedTotalAverage");

                    b.Property<float>("PowerAverage");

                    b.Property<float>("PowerTotalAverage");

                    b.Property<int>("RangeChange");

                    b.Property<int>("RangeTotalAverage");

                    b.Property<int>("SavesChange");

                    b.Property<float>("SavesTotalAverage");

                    b.Property<float>("SpeedAverage");

                    b.Property<float>("SpeedTotalAverage");

                    b.Property<int>("TacklesChange");

                    b.Property<float>("TacklesTotalAverage");

                    b.Property<int>("TasksCompletedChange");

                    b.Property<float>("TasksCompletedTotalAverage");

                    b.Property<int>("TurnoverChange");

                    b.Property<float>("TurnoverTotalAverage");

                    b.HasKey("DateId", "ProfileId", "TaskCategoryId", "OrganizationId");

                    b.HasAlternateKey("DateId", "ProfileId", "TaskCategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("ProfileReportsWeekly");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("ArchivedAt");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("DataStore")
                        .HasMaxLength(4000);

                    b.Property<string>("DataWarehouse")
                        .HasMaxLength(4000);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Timezone")
                        .HasMaxLength(50);

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ProjectAreas");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectMember", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("ProfileId");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.HasKey("ProjectId", "ProfileId", "OrganizationId");

                    b.HasAlternateKey("ProjectId", "ProfileId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectReportDaily", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TaskCategoryId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("AssistsChange");

                    b.Property<int>("AssistsTotal");

                    b.Property<float>("CompanyTokensChange");

                    b.Property<float>("CompanyTokensTotal");

                    b.Property<int>("ComplexityChange");

                    b.Property<int>("ComplexityTotal");

                    b.Property<float>("ContributionChange");

                    b.Property<float>("ContributionTotal");

                    b.Property<DateTime>("Created");

                    b.Property<float>("EffortScoreChange");

                    b.Property<float>("EffortScoreTotal");

                    b.Property<float>("ErrorChange");

                    b.Property<float>("ErrorTotal");

                    b.Property<int>("IterationCount");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("MembersCountTotal");

                    b.Property<int>("OneUpsGivenChange");

                    b.Property<int>("OneUpsGivenTotal");

                    b.Property<int>("OneUpsReceivedChange");

                    b.Property<int>("OneUpsReceivedTotal");

                    b.Property<int>("SavesChange");

                    b.Property<int>("SavesTotal");

                    b.Property<int>("TacklesChange");

                    b.Property<int>("TacklesTotal");

                    b.Property<int>("TasksCompletedChange");

                    b.Property<int>("TasksCompletedTotal");

                    b.Property<int>("TurnoverChange");

                    b.Property<int>("TurnoverTotal");

                    b.HasKey("DateId", "ProjectId", "TaskCategoryId", "OrganizationId");

                    b.HasAlternateKey("DateId", "ProjectId", "TaskCategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("ProjectReportsDaily");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectReportWeekly", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TaskCategoryId");

                    b.Property<int>("OrganizationId");

                    b.Property<float>("AssistsAverage");

                    b.Property<int>("AssistsChange");

                    b.Property<float>("CompanyTokensAverage");

                    b.Property<float>("CompanyTokensChange");

                    b.Property<float>("ComplexityAverage");

                    b.Property<int>("ComplexityChange");

                    b.Property<float>("ContributionAverage");

                    b.Property<float>("ContributionChange");

                    b.Property<DateTime>("Created");

                    b.Property<float>("DImpactAverage");

                    b.Property<float>("DImpactAverageTotal");

                    b.Property<float>("EffortScoreAverage");

                    b.Property<float>("EffortScoreChange");

                    b.Property<float>("ErrorAverage");

                    b.Property<float>("ErrorChange");

                    b.Property<float>("HeatAverageTotal");

                    b.Property<int>("IterationCount");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("MembersCountTotal");

                    b.Property<float>("OImpactAverage");

                    b.Property<float>("OImpactAverageTotal");

                    b.Property<float>("OneUpsGivenAverage");

                    b.Property<int>("OneUpsGivenChange");

                    b.Property<float>("OneUpsReceivedAverage");

                    b.Property<int>("OneUpsReceivedChange");

                    b.Property<float>("PowerAverage");

                    b.Property<float>("PowerAverageTotal");

                    b.Property<int>("RangeAverage");

                    b.Property<int>("RangeChange");

                    b.Property<float>("SavesAverage");

                    b.Property<int>("SavesChange");

                    b.Property<float>("SpeedAverage");

                    b.Property<float>("SpeedAverageTotal");

                    b.Property<float>("TacklesAverage");

                    b.Property<int>("TacklesChange");

                    b.Property<float>("TasksCompletedAverage");

                    b.Property<int>("TasksCompletedChange");

                    b.Property<float>("TurnoverAverage");

                    b.Property<int>("TurnoverChange");

                    b.HasKey("DateId", "ProjectId", "TaskCategoryId", "OrganizationId");

                    b.HasAlternateKey("DateId", "ProjectId", "TaskCategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("ProjectReportsWeekly");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectTeam", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("TeamId");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.HasKey("ProjectId", "TeamId", "OrganizationId");

                    b.HasAlternateKey("ProjectId", "TeamId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TeamId");

                    b.ToTable("ProjectTeams");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("ClosedAt");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("ArchivedAt");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("DisabledAt");

                    b.Property<DateTime?>("DiscountEndsAt");

                    b.Property<float?>("DiscountPrice");

                    b.Property<DateTime?>("FeaturedUntil");

                    b.Property<bool>("IsGlobal");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<float>("Price");

                    b.Property<int?>("Quantity");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItemProject", b =>
                {
                    b.Property<int>("ShopItemId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("DiscountEndsAt");

                    b.Property<float?>("DiscountPrice");

                    b.Property<DateTime?>("HiddenAt");

                    b.Property<DateTime?>("LastModified");

                    b.HasKey("ShopItemId", "ProjectId", "OrganizationId");

                    b.HasAlternateKey("ShopItemId", "ProjectId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ShopItemProjects");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopLog", b =>
                {
                    b.Property<int>("ShopId");

                    b.Property<int>("LogId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Event");

                    b.HasKey("ShopId", "LogId", "OrganizationId");

                    b.HasAlternateKey("ShopId", "LogId");

                    b.HasIndex("LogId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ShopLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("GiftFor");

                    b.Property<bool>("IsDiscounted");

                    b.Property<bool>("IsFeatured");

                    b.Property<int>("ItemId");

                    b.Property<int>("ItemType");

                    b.Property<DateTime?>("LastModified");

                    b.Property<float>("Price");

                    b.Property<float?>("PriceDiscountedFor");

                    b.Property<int>("ProfileId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("Status");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProfileId", "Status");

                    b.ToTable("ShopPurchases");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.StatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("IntegrationType");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("StatTypes");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("AssigneeProfileId");

                    b.Property<float?>("BugPopulationAffect");

                    b.Property<int?>("BugSeverity");

                    b.Property<int>("Complexity");

                    b.Property<DateTime>("Created");

                    b.Property<float?>("EffortScore");

                    b.Property<string>("ExternalId");

                    b.Property<int>("IntegrationType");

                    b.Property<bool>("IsProductionBugCausing");

                    b.Property<bool>("IsProductionBugFixing");

                    b.Property<string>("Labels");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("LastModifiedDateId");

                    b.Property<int>("Priority");

                    b.Property<int?>("ProjectAreaId");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("ReporterProfileId");

                    b.Property<int>("Status");

                    b.Property<int?>("StoryPoints");

                    b.Property<string>("Summary");

                    b.Property<int?>("TaskCategoryId");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TimeOriginalEstimatInMinutes");

                    b.Property<int?>("TimeSpentInMinutes");

                    b.Property<int>("Type");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("AssigneeProfileId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectAreaId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskCategoryId");

                    b.HasIndex("TeamId");

                    b.HasIndex("ExternalId", "IntegrationType")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TaskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("TaskCategories");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("AssigneeProfileId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("ExternalId");

                    b.Property<int>("IntegrationType");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("ProjectId");

                    b.Property<int>("ReporterProfileId");

                    b.Property<int>("Status");

                    b.Property<int>("TeamId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("AssigneeProfileId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamId");

                    b.ToTable("TaskLogs");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("ArchivedAt");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Key", "ArchivedAt")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL AND [ArchivedAt] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamMember", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("ProfileId");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.HasKey("TeamId", "ProfileId", "OrganizationId");

                    b.HasAlternateKey("TeamId", "ProfileId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamReportDaily", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("TeamId");

                    b.Property<int>("TaskCategoryId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("AssistsChange");

                    b.Property<int>("AssistsTotal");

                    b.Property<float>("CompanyTokensChange");

                    b.Property<float>("CompanyTokensTotal");

                    b.Property<int>("ComplexityChange");

                    b.Property<int>("ComplexityTotal");

                    b.Property<float>("ContributionChange");

                    b.Property<float>("ContributionTotal");

                    b.Property<DateTime>("Created");

                    b.Property<float>("EffortScoreChange");

                    b.Property<float>("EffortScoreTotal");

                    b.Property<float>("ErrorChange");

                    b.Property<float>("ErrorTotal");

                    b.Property<int>("IterationCount");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("MembersCountTotal");

                    b.Property<int>("OneUpsGivenChange");

                    b.Property<int>("OneUpsGivenTotal");

                    b.Property<int>("OneUpsReceivedChange");

                    b.Property<int>("OneUpsReceivedTotal");

                    b.Property<int>("SavesChange");

                    b.Property<int>("SavesTotal");

                    b.Property<int>("TacklesChange");

                    b.Property<int>("TacklesTotal");

                    b.Property<int>("TasksCompletedChange");

                    b.Property<int>("TasksCompletedTotal");

                    b.Property<int>("TurnoverChange");

                    b.Property<int>("TurnoverTotal");

                    b.HasKey("DateId", "TeamId", "TaskCategoryId", "OrganizationId");

                    b.HasAlternateKey("DateId", "TeamId", "TaskCategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TaskCategoryId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamReportsDaily");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamReportWeekly", b =>
                {
                    b.Property<int>("DateId");

                    b.Property<int>("TeamId");

                    b.Property<int>("TaskCategoryId");

                    b.Property<int>("OrganizationId");

                    b.Property<float>("AssistsAverage");

                    b.Property<int>("AssistsChange");

                    b.Property<float>("CompanyTokensAverage");

                    b.Property<float>("CompanyTokensChange");

                    b.Property<float>("ComplexityAverage");

                    b.Property<int>("ComplexityChange");

                    b.Property<float>("ContributionAverage");

                    b.Property<float>("ContributionChange");

                    b.Property<DateTime>("Created");

                    b.Property<float>("DImpactAverage");

                    b.Property<float>("DImpactAverageTotal");

                    b.Property<float>("EffortScoreAverage");

                    b.Property<float>("EffortScoreChange");

                    b.Property<float>("ErrorAverage");

                    b.Property<float>("ErrorChange");

                    b.Property<float>("HeatAverageTotal");

                    b.Property<int>("IterationCount");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("MembersCountTotal");

                    b.Property<float>("OImpactAverage");

                    b.Property<float>("OImpactAverageTotal");

                    b.Property<float>("OneUpsGivenAverage");

                    b.Property<int>("OneUpsGivenChange");

                    b.Property<float>("OneUpsReceivedAverage");

                    b.Property<int>("OneUpsReceivedChange");

                    b.Property<float>("PowerAverage");

                    b.Property<float>("PowerAverageTotal");

                    b.Property<int>("RangeAverage");

                    b.Property<int>("RangeChange");

                    b.Property<float>("SavesAverage");

                    b.Property<int>("SavesChange");

                    b.Property<float>("SpeedAverage");

                    b.Property<float>("SpeedAverageTotal");

                    b.Property<float>("TacklesAverage");

                    b.Property<int>("TacklesChange");

                    b.Property<float>("TasksCompletedAverage");

                    b.Property<int>("TasksCompletedChange");

                    b.Property<float>("TurnoverAverage");

                    b.Property<int>("TurnoverChange");

                    b.HasKey("DateId", "TeamId", "TaskCategoryId", "OrganizationId");

                    b.HasAlternateKey("DateId", "TeamId", "TaskCategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TaskCategoryId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamReportsWeekly");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("SupplyAddress");

                    b.Property<string>("Symbol");

                    b.Property<int>("Type");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TokenTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("ClaimRequired");

                    b.Property<DateTime?>("ClaimedAt");

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Created");

                    b.Property<double>("FinalBalance");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("ProfileId");

                    b.Property<int>("Reason");

                    b.Property<int>("TokenId");

                    b.Property<string>("TxnHash");

                    b.Property<double>("Value");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenTransactions");
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WebhookEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Data");

                    b.Property<DateTime?>("LastModified");

                    b.HasKey("Id", "OrganizationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("WebhookEventLogs");
                });

            modelBuilder.Entity("Firdaws.DAL.EntityChangeLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Challenge", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany("Challenges")
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ChallengeCompletion", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("CompletedChallenges")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundle", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleItem", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.ClaimBundle", "ClaimBundle")
                        .WithMany("Items")
                        .HasForeignKey("ClaimBundleId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.ProfileInventoryItem", "ProfileInventoryItem")
                        .WithMany()
                        .HasForeignKey("ProfileInventoryItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ClaimBundleTokenTxn", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.ClaimBundle", "ClaimBundle")
                        .WithMany("TokenTxns")
                        .HasForeignKey("ClaimBundleId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.TokenTransaction", "TokenTransaction")
                        .WithMany()
                        .HasForeignKey("TokenTransactionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Competition", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Competition", "PreviousCompetition")
                        .WithMany()
                        .HasForeignKey("PreviousCompetitionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.CompetitionLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.CompetitionReward", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Competition", "Competition")
                        .WithMany("Rewards")
                        .HasForeignKey("CompetitionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Competitor", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Competition", "Competition")
                        .WithMany("Competitors")
                        .HasForeignKey("CompetitionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.CompetitorScore", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Competitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Integration", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.IntegrationField", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Integration")
                        .WithMany("Fields")
                        .HasForeignKey("IntegrationId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Invitation", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Invitations")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Item", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemDisenchant", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ItemGift", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Log", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Profile", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileInventoryItem", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileOneUp", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "UppedProfile")
                        .WithMany()
                        .HasForeignKey("UppedProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileReportDaily", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("StatsDaily")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProfileReportWeekly", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("StatsWeekly")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Project", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectArea", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectMember", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Projects")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectReportDaily", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany("ReportsDaily")
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectReportWeekly", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany("ReportsWeekly")
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ProjectTeam", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Shop", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItem", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopItemProject", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.ShopItem", "ShopItem")
                        .WithMany("Projects")
                        .HasForeignKey("ShopItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.ShopPurchase", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.StatType", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Task", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "AssigneeProfile")
                        .WithMany()
                        .HasForeignKey("AssigneeProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.ProjectArea", "ProjectArea")
                        .WithMany()
                        .HasForeignKey("ProjectAreaId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TaskCategory", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TaskLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Profile", "AssigneeProfile")
                        .WithMany()
                        .HasForeignKey("AssigneeProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Team", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamMember", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Teams")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamReportDaily", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany("ReportsDaily")
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TeamReportWeekly", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.TaskCategory", "TaskCategory")
                        .WithMany()
                        .HasForeignKey("TaskCategoryId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Team", "Team")
                        .WithMany("ReportsWeekly")
                        .HasForeignKey("TeamId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.Token", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.TokenTransaction", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tayra.Models.Organizations.Profile", "Profile")
                        .WithMany("Tokens")
                        .HasForeignKey("ProfileId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tayra.Models.Organizations.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tayra.Models.Organizations.WebhookEventLog", b =>
                {
                    b.HasOne("Tayra.Models.Organizations.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
